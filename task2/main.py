"""
MongoDB CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –∫–æ–ª–µ–∫—Ü—ñ—ó –∫–æ—Ç—ñ–≤
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î PyMongo –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö cats_db
"""

from typing import Optional, List, Dict, Any
from pymongo import MongoClient
from pymongo.collection import Collection
from pymongo.database import Database
from pymongo.errors import ConnectionFailure, PyMongoError
import sys


class CatsDatabase:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∫–æ—Ç—ñ–≤ –∑ MongoDB"""
    
    def __init__(self, connection_string: str = "mongodb://cats_user:cats_password@localhost:27017/cats_db"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
        
        Args:
            connection_string: –†—è–¥–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
        """
        self.connection_string = connection_string
        self.client: Optional[MongoClient] = None
        self.database: Optional[Database] = None
        self.collection: Optional[Collection] = None
        
    def connect(self) -> bool:
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
        
        Returns:
            True —è–∫—â–æ –∑'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ, False —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        """
        try:
            self.client = MongoClient(self.connection_string)
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
            self.client.admin.command('ping')
            
            self.database = self.client.cats_db
            self.collection = self.database.cats
            
            print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB!")
            return True
            
        except ConnectionFailure as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ: {e}")
            return False
    
    def disconnect(self) -> None:
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
        if self.client:
            self.client.close()
            print("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ")
    
    def create_cat(self, name: str, age: int, features: List[str]) -> bool:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö (CREATE)
        
        Args:
            name: –Ü–º'—è –∫–æ—Ç–∞
            age: –í—ñ–∫ –∫–æ—Ç–∞
            features: –°–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–æ—Ç–∞
            
        Returns:
            True —è–∫—â–æ –∫—ñ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π, False —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        """
        try:
            if self.collection is None:
                print("‚ùå –ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö")
                return False
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —ñ—Å–Ω—É—î –≤–∂–µ –∫—ñ—Ç –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º
            existing_cat = self.collection.find_one({"name": name})
            if existing_cat:
                print(f"‚ö†Ô∏è –ö—ñ—Ç –∑ —ñ–º–µ–Ω–µ–º '{name}' –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!")
                return False
            
            cat_document = {
                "name": name,
                "age": age,
                "features": features
            }
            
            result = self.collection.insert_one(cat_document)
            
            if result.inserted_id:
                print(f"‚úÖ –ö—ñ—Ç '{name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
                print(f"üîó ID: {result.inserted_id}")
                return True
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ç–∞")
                return False
                
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ MongoDB –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ç–∞: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ç–∞: {e}")
            return False
    
    def read_all_cats(self) -> None:
        """–ß–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (READ)"""
        try:
            if self.collection is None:
                print("‚ùå –ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö")
                return
                
            cats = list(self.collection.find())
            
            if not cats:
                print("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è - –∫–æ—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            print(f"\nüê± –ó–Ω–∞–π–¥–µ–Ω–æ {len(cats)} –∫–æ—Ç—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:")
            print("=" * 60)
            
            for i, cat in enumerate(cats, 1):
                print(f"\n{i}. ID: {cat['_id']}")
                print(f"   –Ü–º'—è: {cat['name']}")
                print(f"   –í—ñ–∫: {cat['age']} —Ä–æ–∫—ñ–≤")
                print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(cat['features'])}")
            
            print("=" * 60)
            
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ MongoDB –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∫–æ—Ç—ñ–≤: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∫–æ—Ç—ñ–≤: {e}")
    
    def read_cat_by_name(self, name: str) -> None:
        """
        –ß–∏—Ç–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ç–∞ –∑–∞ —ñ–º–µ–Ω–µ–º (READ)
        
        Args:
            name: –Ü–º'—è –∫–æ—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É
        """
        try:
            if self.collection is None:
                print("‚ùå –ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö")
                return
                
            cat = self.collection.find_one({"name": name})
            
            if not cat:
                print(f"üòø –ö–æ—Ç–∞ –∑ —ñ–º–µ–Ω–µ–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
                return
            
            print(f"\nüê± –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ç–∞ '{name}':")
            print("=" * 40)
            print(f"ID: {cat['_id']}")
            print(f"–Ü–º'—è: {cat['name']}")
            print(f"–í—ñ–∫: {cat['age']} —Ä–æ–∫—ñ–≤")
            print(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(cat['features'])}")
            print("=" * 40)
            
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ MongoDB –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ç–∞: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ç–∞: {e}")
    
    def update_cat_age(self, name: str, new_age: int) -> bool:
        """
        –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∫—É –∫–æ—Ç–∞ –∑–∞ —ñ–º–µ–Ω–µ–º (UPDATE)
        
        Args:
            name: –Ü–º'—è –∫–æ—Ç–∞
            new_age: –ù–æ–≤–∏–π –≤—ñ–∫ –∫–æ—Ç–∞
            
        Returns:
            True —è–∫—â–æ –≤—ñ–∫ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ, False —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        """
        try:
            if self.collection is None:
                print("‚ùå –ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö")
                return False
                
            result = self.collection.update_one(
                {"name": name},
                {"$set": {"age": new_age}}
            )
            
            if result.matched_count == 0:
                print(f"üòø –ö–æ—Ç–∞ –∑ —ñ–º–µ–Ω–µ–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
                return False
            elif result.modified_count == 1:
                print(f"‚úÖ –í—ñ–∫ –∫–æ—Ç–∞ '{name}' —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_age} —Ä–æ–∫—ñ–≤!")
                return True
            else:
                print(f"‚ö†Ô∏è –ö—ñ—Ç '{name}' –∑–Ω–∞–π–¥–µ–Ω–∏–π, –∞–ª–µ –≤—ñ–∫ –Ω–µ –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ, –Ω–æ–≤–∏–π –≤—ñ–∫ —Ç–∞–∫–∏–π –∂–µ)")
                return True
                
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ MongoDB –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–∫—É –∫–æ—Ç–∞: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–∫—É –∫–æ—Ç–∞: {e}")
            return False
    
    def add_cat_feature(self, name: str, new_feature: str) -> bool:
        """
        –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ –∫–æ—Ç–∞ –∑–∞ —ñ–º–µ–Ω–µ–º (UPDATE)
        
        Args:
            name: –Ü–º'—è –∫–æ—Ç–∞
            new_feature: –ù–æ–≤–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
            
        Returns:
            True —è–∫—â–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞, False —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        """
        try:
            if self.collection is None:
                print("‚ùå –ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö")
                return False
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫—ñ—Ç
            cat = self.collection.find_one({"name": name})
            if not cat:
                print(f"üòø –ö–æ—Ç–∞ –∑ —ñ–º–µ–Ω–µ–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î —Ç–∞–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
            if new_feature in cat.get('features', []):
                print(f"‚ö†Ô∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ '{new_feature}' –≤–∂–µ —ñ—Å–Ω—É—î —É –∫–æ—Ç–∞ '{name}'")
                return True
            
            result = self.collection.update_one(
                {"name": name},
                {"$addToSet": {"features": new_feature}}
            )
            
            if result.modified_count == 1:
                print(f"‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ '{new_feature}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ –∫–æ—Ç—É '{name}'!")
                return True
            else:
                print(f"‚ö†Ô∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–µ –±—É–ª–∞ –¥–æ–¥–∞–Ω–∞ (–º–æ–∂–ª–∏–≤–æ, –≤–∂–µ —ñ—Å–Ω—É–≤–∞–ª–∞)")
                return True
                
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ MongoDB –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    def delete_cat_by_name(self, name: str) -> bool:
        """
        –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ç–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞ —ñ–º–µ–Ω–µ–º (DELETE)
        
        Args:
            name: –Ü–º'—è –∫–æ—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            
        Returns:
            True —è–∫—â–æ –∫—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π, False —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        """
        try:
            if self.collection is None:
                print("‚ùå –ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö")
                return False
                
            result = self.collection.delete_one({"name": name})
            
            if result.deleted_count == 1:
                print(f"‚úÖ –ö—ñ—Ç '{name}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
                return True
            else:
                print(f"üòø –ö–æ—Ç–∞ –∑ —ñ–º–µ–Ω–µ–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
                return False
                
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ MongoDB –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ç–∞: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ç–∞: {e}")
            return False
    
    def delete_all_cats(self) -> bool:
        """
        –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (DELETE)
        
        Returns:
            True —è–∫—â–æ –æ–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, False —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        """
        try:
            if self.collection is None:
                print("‚ùå –ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö")
                return False
                
            # –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            confirmation = input("‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü–• –∫–æ—Ç—ñ–≤? (—Ç–∞–∫/–Ω—ñ): ").strip().lower()
            
            if confirmation not in ['—Ç–∞–∫', 'yes', 'y']:
                print("üõ°Ô∏è –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
                return False
            
            result = self.collection.delete_many({})
            
            if result.deleted_count > 0:
                print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ {result.deleted_count} –∫–æ—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
                return True
            else:
                print("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤–∂–µ –ø–æ—Ä–æ–∂–Ω—è - –∫–æ—Ç—ñ–≤ –Ω–µ –±—É–ª–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                return True
                
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ MongoDB –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤: {e}")
            return False


def print_menu() -> None:
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("\n" + "="*50)
    print("üê± –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ë–ê–ó–û–Æ –î–ê–ù–ò–• –ö–û–¢–Ü–í üê±")
    print("="*50)
    print("1. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤")
    print("2. –ó–Ω–∞–π—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º–µ–Ω–µ–º")
    print("3. –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞")
    print("4. –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–∫ –∫–æ—Ç–∞")
    print("5. –î–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∫–æ—Ç—É")
    print("6. –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º–µ–Ω–µ–º")
    print("7. –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤")
    print("8. –í–∏–π—Ç–∏ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏")
    print("="*50)


def get_user_input(prompt: str, input_type: type = str) -> Any:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–≤–æ–¥—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ç–∏–ø—É
    
    Args:
        prompt: –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        input_type: –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö
        
    Returns:
        –í–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É
    """
    while True:
        try:
            user_input = input(prompt).strip()
            
            if input_type == str:
                if not user_input:
                    print("‚ùå –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    continue
                return user_input
            elif input_type == int:
                value = int(user_input)
                if value < 0:
                    print("‚ùå –í—ñ–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    continue
                return value
            elif input_type == list:
                if not user_input:
                    return []
                # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ –∫–æ–º–∞—Ö —Ç–∞ –æ—á–∏—â–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
                features = [feature.strip() for feature in user_input.split(',') if feature.strip()]
                return features
                
        except ValueError:
            print(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –û—á—ñ–∫—É—î—Ç—å—Å—è {input_type.__name__}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            sys.exit(0)


def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∫–æ—Ç—ñ–≤")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    cats_db = CatsDatabase()
    
    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if not cats_db.connect():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return
    
    try:
        while True:
            print_menu()
            
            try:
                choice = input("üëâ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-8): ").strip()
                
                if choice == "1":
                    cats_db.read_all_cats()
                
                elif choice == "2":
                    name = get_user_input("üîç –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É: ", str)
                    cats_db.read_cat_by_name(name)
                
                elif choice == "3":
                    print("\n‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞:")
                    name = get_user_input("üìù –Ü–º'—è –∫–æ—Ç–∞: ", str)
                    age = get_user_input("üéÇ –í—ñ–∫ –∫–æ—Ç–∞: ", int)
                    print("üè∑Ô∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ—Ç–∞ (—á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: —Ä—É–¥–∏–π, –≥—Ä–∞–π–ª–∏–≤–∏–π, –ª—é–±–∏—Ç—å —Ä–∏–±—É):")
                    features = get_user_input("   ", list)
                    
                    cats_db.create_cat(name, age, features)
                
                elif choice == "4":
                    name = get_user_input("üìù –Ü–º'—è –∫–æ—Ç–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∫—É: ", str)
                    new_age = get_user_input("üéÇ –ù–æ–≤–∏–π –≤—ñ–∫ –∫–æ—Ç–∞: ", int)
                    cats_db.update_cat_age(name, new_age)
                
                elif choice == "5":
                    name = get_user_input("üìù –Ü–º'—è –∫–æ—Ç–∞: ", str)
                    new_feature = get_user_input("üè∑Ô∏è –ù–æ–≤–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ", str)
                    cats_db.add_cat_feature(name, new_feature)
                
                elif choice == "6":
                    name = get_user_input("üìù –Ü–º'—è –∫–æ—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ", str)
                    cats_db.delete_cat_by_name(name)
                
                elif choice == "7":
                    cats_db.delete_all_cats()
                
                elif choice == "8":
                    print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                    break
                
                else:
                    print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –≤—ñ–¥ 1 –¥–æ 8.")
            
            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
    
    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
        cats_db.disconnect()


def run_comprehensive_tests():
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π —Å–∏—Å—Ç–µ–º–∏
    """
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø MONGODB CRUD –°–ò–°–¢–ï–ú–ò")
    print("=" * 60)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    db = CatsDatabase()
    if not db.connect():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        return
    
    test_results = []
    
    # –¢–ï–°–¢ 1: –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤
    print("\n" + "="*60)
    print("üî∏ –¢–ï–°–¢ 1: –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤")
    print("="*60)
    try:
        db.read_all_cats()
        test_results.append("‚úÖ –¢–µ—Å—Ç 1: –ü–æ–∫–∞–∑ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤ - –ü–†–û–ô–î–ï–ù–û")
    except Exception as e:
        test_results.append(f"‚ùå –¢–µ—Å—Ç 1: –ü–æ–∫–∞–∑ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤ - –ü–û–ú–ò–õ–ö–ê: {e}")
    
    # –¢–ï–°–¢ 2: –ü–æ—à—É–∫ –∑–∞ —ñ–º–µ–Ω–µ–º
    print("\n" + "="*60)
    print("üî∏ –¢–ï–°–¢ 2: –ü–æ—à—É–∫ –∑–∞ —ñ–º–µ–Ω–µ–º")
    print("="*60)
    try:
        print("üîç –®—É–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ç–∞ 'barsik':")
        db.read_cat_by_name("barsik")
        print("\nüîç –®—É–∫–∞—î–º–æ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ç–∞ 'nonexistent':")
        db.read_cat_by_name("nonexistent")
        test_results.append("‚úÖ –¢–µ—Å—Ç 2: –ü–æ—à—É–∫ –∑–∞ —ñ–º–µ–Ω–µ–º - –ü–†–û–ô–î–ï–ù–û")
    except Exception as e:
        test_results.append(f"‚ùå –¢–µ—Å—Ç 2: –ü–æ—à—É–∫ –∑–∞ —ñ–º–µ–Ω–µ–º - –ü–û–ú–ò–õ–ö–ê: {e}")
    
    # –¢–ï–°–¢ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ç–∞
    print("\n" + "="*60)
    print("üî∏ –¢–ï–°–¢ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ç–∞")
    print("="*60)
    try:
        print("‚ûï –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞ 'test_cat':")
        result = db.create_cat("test_cat", 2, ["—Ç–µ—Å—Ç–æ–≤–∏–π", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π"])
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç CREATE: {'‚úÖ –£—Å–ø—ñ—Ö' if result else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
        
        print("\n‚ûï –°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç:")
        duplicate_result = db.create_cat("test_cat", 3, ["–¥—É–±–ª—ñ–∫–∞—Ç"])
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É–±–ª—ñ–∫–∞—Ç—É: {'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ' if not duplicate_result else '‚ùå –î–æ–∑–≤–æ–ª–∏–≤ –¥—É–±–ª—ñ–∫–∞—Ç'}")
        
        test_results.append("‚úÖ –¢–µ—Å—Ç 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ç–∞ - –ü–†–û–ô–î–ï–ù–û")
    except Exception as e:
        test_results.append(f"‚ùå –¢–µ—Å—Ç 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ç–∞ - –ü–û–ú–ò–õ–ö–ê: {e}")
    
    # –¢–ï–°–¢ 4: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∫—É
    print("\n" + "="*60)
    print("üî∏ –¢–ï–°–¢ 4: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∫—É")
    print("="*60)
    try:
        print("üéÇ –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∫ –∫–æ—Ç–∞ 'test_cat':")
        result = db.update_cat_age("test_cat", 4)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç UPDATE age: {'‚úÖ –£—Å–ø—ñ—Ö' if result else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
        
        print("\nüéÇ –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ç–∞:")
        nonexistent_result = db.update_cat_age("nonexistent", 5)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ: {'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–∏–≤' if not nonexistent_result else '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞'}")
        
        test_results.append("‚úÖ –¢–µ—Å—Ç 4: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∫—É - –ü–†–û–ô–î–ï–ù–û")
    except Exception as e:
        test_results.append(f"‚ùå –¢–µ—Å—Ç 4: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∫—É - –ü–û–ú–ò–õ–ö–ê: {e}")
    
    # –¢–ï–°–¢ 5: –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    print("\n" + "="*60)
    print("üî∏ –¢–ï–°–¢ 5: –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    print("="*60)
    try:
        print("üè∑Ô∏è –î–æ–¥–∞—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É '—Ä–æ–∑—É–º–Ω–∏–π':")
        result = db.add_cat_feature("test_cat", "—Ä–æ–∑—É–º–Ω–∏–π")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç ADD feature: {'‚úÖ –£—Å–ø—ñ—Ö' if result else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
        
        print("\nüè∑Ô∏è –î–æ–¥–∞—î–º–æ —Ç—É –∂ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ:")
        duplicate_feature = db.add_cat_feature("test_cat", "—Ä–æ–∑—É–º–Ω–∏–π")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É–±–ª—ñ–∫–∞—Ç—É: {'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–∏–≤' if duplicate_feature else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
        
        test_results.append("‚úÖ –¢–µ—Å—Ç 5: –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ - –ü–†–û–ô–î–ï–ù–û")
    except Exception as e:
        test_results.append(f"‚ùå –¢–µ—Å—Ç 5: –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ - –ü–û–ú–ò–õ–ö–ê: {e}")
    
    # –¢–ï–°–¢ 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∫–æ—Ç–∞
    print("\n" + "="*60)
    print("üî∏ –¢–ï–°–¢ 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∫–æ—Ç–∞")
    print("="*60)
    try:
        print("üëÄ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∫–æ—Ç–∞ 'test_cat':")
        db.read_cat_by_name("test_cat")
        test_results.append("‚úÖ –¢–µ—Å—Ç 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∫–æ—Ç–∞ - –ü–†–û–ô–î–ï–ù–û")
    except Exception as e:
        test_results.append(f"‚ùå –¢–µ—Å—Ç 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∫–æ—Ç–∞ - –ü–û–ú–ò–õ–ö–ê: {e}")
    
    # –¢–ï–°–¢ 7: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ç–∞
    print("\n" + "="*60)
    print("üî∏ –¢–ï–°–¢ 7: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ç–∞")
    print("="*60)
    try:
        print("üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ç–∞ 'test_cat':")
        result = db.delete_cat_by_name("test_cat")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç DELETE: {'‚úÖ –£—Å–ø—ñ—Ö' if result else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
        
        print("\nüóëÔ∏è –°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≥–æ –∂ –∫–æ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ:")
        repeat_delete = db.delete_cat_by_name("test_cat")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–∏–≤' if not repeat_delete else '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞'}")
        
        test_results.append("‚úÖ –¢–µ—Å—Ç 7: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ç–∞ - –ü–†–û–ô–î–ï–ù–û")
    except Exception as e:
        test_results.append(f"‚ùå –¢–µ—Å—Ç 7: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ç–∞ - –ü–û–ú–ò–õ–ö–ê: {e}")
    
    # –¢–ï–°–¢ 8: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–æ–¥—É
    print("\n" + "="*60)
    print("üî∏ –¢–ï–°–¢ 8: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–æ–¥—É")
    print("="*60)
    try:
        import builtins
        original_input = builtins.input
        
        # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞
        inputs = ['', 'valid_name']
        input_iter = iter(inputs)
        builtins.input = lambda prompt: next(input_iter)
        
        from io import StringIO
        import sys
        captured_output = StringIO()
        original_stdout = sys.stdout
        sys.stdout = captured_output
        
        result = get_user_input("–¢–µ—Å—Ç —ñ–º'—è: ", str)
        
        sys.stdout = original_stdout
        output = captured_output.getvalue()
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {result}")
        print("‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞ –ø—Ä–∞—Ü—é—î" if "–Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º" in output else "‚ùå –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î")
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        builtins.input = original_input
        
        test_results.append("‚úÖ –¢–µ—Å—Ç 8: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–æ–¥—É - –ü–†–û–ô–î–ï–ù–û")
    except Exception as e:
        test_results.append(f"‚ùå –¢–µ—Å—Ç 8: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–æ–¥—É - –ü–û–ú–ò–õ–ö–ê: {e}")
    
    # –¢–ï–°–¢ 9: –§—É–Ω–∫—Ü—ñ—è delete_all_cats (–±–µ–∑–ø–µ—á–Ω–∏–π —Ç–µ—Å—Ç)
    print("\n" + "="*60)
    print("üî∏ –¢–ï–°–¢ 9: –§—É–Ω–∫—Ü—ñ—è delete_all_cats (–±–µ–∑–ø–µ—á–Ω–∏–π)")
    print("="*60)
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ç–∞
        db.create_cat("temp_test", 1, ["—Ç–∏–º—á–∞—Å–æ–≤–∏–π"])
        
        # –¢–µ—Å—Ç—É—î–º–æ –≤—ñ–¥–º–æ–≤—É
        import builtins
        original_input = builtins.input
        builtins.input = lambda prompt: '–Ω—ñ'
        
        result = db.delete_all_cats()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –≤—ñ–¥–º–æ–≤—ñ: {'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ' if not result else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
        
        # –û—á–∏—â–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ç–∞
        builtins.input = original_input
        db.delete_cat_by_name("temp_test")
        
        test_results.append("‚úÖ –¢–µ—Å—Ç 9: –§—É–Ω–∫—Ü—ñ—è delete_all_cats - –ü–†–û–ô–î–ï–ù–û")
    except Exception as e:
        test_results.append(f"‚ùå –¢–µ—Å—Ç 9: –§—É–Ω–∫—Ü—ñ—è delete_all_cats - –ü–û–ú–ò–õ–ö–ê: {e}")
    
    # –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Å—Ç–∞–Ω –±–∞–∑–∏
    print("\n" + "="*60)
    print("üìä –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –°–¢–ê–ù –ë–ê–ó–ò –î–ê–ù–ò–•")
    print("="*60)
    db.read_all_cats()
    
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    db.disconnect()
    
    # –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—ñ–≤
    print("\n" + "="*60)
    print("üìã –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("="*60)
    for result in test_results:
        print(result)
    
    passed_tests = sum(1 for result in test_results if result.startswith("‚úÖ"))
    total_tests = len(test_results)
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!")
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞.")
    
    print("=" * 60)


if __name__ == "__main__":
    import sys
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    if len(sys.argv) > 1 and sys.argv[1] == "--test":
        run_comprehensive_tests()
    else:
        main()
